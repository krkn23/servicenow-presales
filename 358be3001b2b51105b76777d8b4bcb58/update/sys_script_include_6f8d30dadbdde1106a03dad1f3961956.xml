<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_pre_sales.Estimate</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Processes the input from the questionnaire and returns a list of tasks with efforts and the confidence score.</description>
        <name>Estimate</name>
        <script><![CDATA[function Estimate(input)
{
	var GetValue = x_snc_devtools.GetValue;
	var SetValue = x_snc_devtools.SetValue;
	var GetFloatValue = x_snc_devtools.GetFloatValue;
	var GetKeys = x_snc_devtools.GetKeys;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var IsArray = x_snc_devtools.IsArray;
	var IsObject = x_snc_devtools.IsObject;
	var Clone = x_snc_devtools.Clone;
	var StringReplace = x_snc_devtools.StringReplace;
	var GetArrayValue = x_snc_devtools.GetArrayValue;


	var rules = GetEstimationRules();

	var estimate = {};
	var aTasks = [];

	estimate.rules = rules;
	
	var aKeys = GetKeys(GetValue(rules,'inputs'));
	for (var nKey = 0; nKey < aKeys.length; nKey++)
	{
		var strKey = aKeys[nKey];
		var strInput = GetStringValue(GetValue(input,strKey));
		estimate = SetValue(strInput,estimate,'input',strKey);
		if (strInput == '')
		{
			strInput = 'default';
		}
		var rule = GetValue(rules,'inputs',strKey);
		
		var task_per_line = GetValue(rule,'task_per_line');
		if (IsObject(task_per_line))
		{
			var bCondition = true;
			var conditions = GetValue(rule,'condition');
			var aConditionKeys = GetKeys(conditions);
			for (var nConditionInput = 0; nConditionInput < aConditionKeys.length; nConditionInput++)
			{
				var strConditionInput = aConditionKeys[nConditionInput];
				var strConditionValue = GetValue(rule,'condition',strConditionInput);
				if (strConditionValue != GetStringValue(GetValue(input,strConditionInput)) )
				{
					bCondition = false;
				}
			}
			if (bCondition == true)
			{
				strInput = StringReplace(strInput,'\n',',');
				var aLines = GetArrayValue(strInput);
				for (var nLine = 0; nLine < aLines.length; nLine++)
				{
					var strLine = aLines[nLine];
					strLine = strLine.trim();
					if (strLine != '')
					{
						var newtask = Clone(task_per_line);
						newtask.short_description = StringReplace(newtask.short_description,'%',strLine);
						aTasks.push(newtask);
					}
				}
			}
			
		}
		else
		{
			var values = GetValue(rule,strInput);
			var fConfidence = GetValue(values,'confidence');
			if (fConfidence !== null)
			{
				estimate = SetValue(fConfidence,estimate,'confidence',strKey);

			}
			var fEffortFactor = GetValue(values,'effort_factor');
			if (fEffortFactor != null)
			{
				estimate = SetValue(fEffortFactor,estimate,'effort_factors',strKey);
			}	
			var aInputTasks = GetValue(values,'tasks');
			if (IsArray(aInputTasks) == true)
			{
				for (var nTask = 0; nTask < aInputTasks.length; nTask++)
				{
					var task = aInputTasks[nTask];
					aTasks.push(task);
				}
			}
		}
		
	}
	

	// Calculate confidence score
	var fConfidence = 0; 
	var confidence = GetValue(estimate,'confidence');
	var aConfidenceKeys = GetKeys(confidence);
	for (var nKey = 0; nKey < aConfidenceKeys.length; nKey++)
	{
		fConfidence += GetFloatValue(GetValue(confidence,aConfidenceKeys[nKey]));
	}
	if (nKey > 0)
	{
		fConfidence = fConfidence / nKey; 
	}
	SetValue(fConfidence,estimate,'factors','confidence');

	// Calculate effort factor
	var fEffortFactor = 1; 
	var effort = GetValue(estimate,'effort_factors');
	var aEffortKeys = GetKeys(effort);
	for (var nKey = 0; nKey < aEffortKeys.length; nKey++)
	{
		fEffortFactor *= GetFloatValue(GetValue(effort,aEffortKeys[nKey]));
	}
	SetValue(fEffortFactor,estimate,'factors','effort');
	
	// Calculate Tasks
	var fTotalEffort = 0;
	for (var nTask = 0; nTask < aTasks.length; nTask++)
	{
		var task = aTasks[nTask];
		var fEffort = GetFloatValue(GetValue(task,'base_effort'));
		fEffort *= fEffortFactor;
		fEffort = Math.round(fEffort);
		fEffort = Math.max(fEffort,1);
		fTotalEffort += fEffort;
		task['effort'] = fEffort;
		aTasks[nTask] = task;
	}
	
	estimate.tasks = aTasks;
	
	// Calculate Totals
	estimate = SetValue(fTotalEffort,estimate,'totals','effort');
	
	var fDeviation = fTotalEffort * (1-(fConfidence*0.9));
	fDeviation = Math.round(fDeviation);
	estimate = SetValue(fDeviation,estimate,'totals','effort_deviation');
	
	estimate = SetValue(fTotalEffort - fDeviation,estimate,'totals','effort_lower');
	estimate = SetValue(fTotalEffort + fDeviation,estimate,'totals','effort_upper');
	
	return estimate;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-02 19:58:35</sys_created_on>
        <sys_id>6f8d30dadbdde1106a03dad1f3961956</sys_id>
        <sys_mod_count>53</sys_mod_count>
        <sys_name>Estimate</sys_name>
        <sys_package display_value="PreSales WORK IN PROGRESS" source="x_snc_pre_sales">358be3001b2b51105b76777d8b4bcb58</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="PreSales WORK IN PROGRESS">358be3001b2b51105b76777d8b4bcb58</sys_scope>
        <sys_update_name>sys_script_include_6f8d30dadbdde1106a03dad1f3961956</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-24 18:33:30</sys_updated_on>
    </sys_script_include>
</record_update>
